/**

 * @param {string} beginWord

 * @param {string} endWord

 * @param {Set} wordList

 *   Note: wordList is a Set object, see:

 *   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set

 * @return {string[][]}

 */

var findLadders = function(beginWord, endWord, wordList) {

    if(beginWord.length !== endWord.length) {

        return [];

    }

    var map = {};

    wordList.add(endWord);

    map = bfs(beginWord, map, wordList);

    return dfs(beginWord, endWord, map);

};

var bfs = function(bW, map, wL) {

    var crrt = new Set();

    var next = new Set();

    crrt.add(bW);

    var itr = crrt.values();

    var val = itr.next().value;

    while(typeof val !== 'undefined') {

        map[val] = new Set();

        wL.delete(val);

        for(let i = 0; i < val.length; i ++) {

            for(let j = 0; j < 26; j ++) {

                let tmp = val.substring(0, i) + String.fromCharCode('a'.charCodeAt(0) + j) + val.substring(i + 1, val.length);

                if(tmp !== val && !crrt.has(tmp) && wL.has(tmp)) {

                    next.add(tmp);

                    map[val].add(tmp);

                }

            }

        }

        val = itr.next().value;

        if(typeof val === 'undefined' && next.size > 0) {

            crrt = next;

            next = new Set();

            itr = crrt.values();

            val = itr.next().value;

        }

    }

    return map;

};

var dfs = function(bW, eW, map) {

    var rst = [];

    if(map[bW].has(eW)) {

        rst.push([bW, eW]);

        return rst;

    }

    var itr = map[bW].values();

    var val = itr.next().value;

    while(typeof val !== 'undefined') {

        let cntnt = dfs(val, eW, map);

        if(cntnt.length > 0) {

            for(let i = 0; i < cntnt.length; i ++) {

                cntnt[i].unshift(bW);

            }

            rst = rst.concat(cntnt);

        }

        val = itr.next().value;

    }

    return rst;

}
