/**
 * Definition for a point.
 * function Point(x, y) {
 *     this.x = x;
 *     this.y = y;
 * }
 */
/**
 * @param {Point[]} points
 * @return {number}
 */
var maxPoints = function(points) {
    if(!Array.isArray(points)) {
        return 0;
    }
    if(points.length < 3) {
        return points.length;
    }
    var ref = [];
    var pcnt = [];
    var i = 0;
    for(i = 0; i < points.length; i ++) {
        ref[i] = points[i];
    }
    ref.sort(function(p1, p2) {
        if(p1.x !== p2.x) {
            return p1.x - p2.x;
        } else {
            return p1.y - p2.y;
        }
    })
    i = 1;
    pcnt[0] = 1;
    while(i < ref.length) {
        if(ref[i].x === ref[i - 1].x && ref[i].y === ref[i - 1].y) {
            pcnt[i - 1] ++;
            ref.splice(i, 1);
        } else {
            pcnt[i] = 1;
            i ++;
        }
    }
//    console.log(ref);
//    console.log(pcnt);
    var tmp = {};
    var max = 0;
    for(i = 0; i < ref.length - 1; i ++) {
//        console.log(ref[i]);
        for(var j = i + 1; j < ref.length; j ++) {
            var a = (ref[j].y - ref[i].y) / (ref[j].x - ref[i].x);
            if(typeof tmp[a] === 'undefined') {
                tmp[a] = pcnt[i];
            }
            tmp[a] += pcnt[j];
        }
        for(var prop in tmp) {
            max = (tmp[prop] > max) ? tmp[prop] : max;
        }
//        console.log(tmp);
        tmp = {};
    }
    if(max === 0) {
        pcnt.forEach(function(cnt) {
            max = (max > cnt) ? max : cnt;
        });
    }
    return max;
};