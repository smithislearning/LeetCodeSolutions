/**

 * Definition for singly-linked list.

 * function ListNode(val) {

 *     this.val = val;

 *     this.next = null;

 * }

 */

/**

 * @param {ListNode} head

 * @return {boolean}

 */

var isPalindrome = function(head) {

    if(head === null || head.next === null) {

        return true;

    }

    var slow = head, fast = head;

    while(slow.next !== null && fast.next !== null && fast.next.next !== null) {

        slow = slow.next;

        fast = fast.next.next;

    }

    slow.next = reverseLinkedList(slow.next);

    var second = slow.next;

    while(second !== null && head.val === second.val) {

        head = head.next;

        second = second.next;

    }

    return second === null;

};



var reverseLinkedList = function(node) {

    var dummy = new ListNode(0);

    dummy.next = node;

    while(node.next !== null) {

        let tmp = node.next;

        node.next = node.next.next;

        tmp.next = dummy.next;

        dummy.next = tmp;

    }

    return dummy.next;

}
