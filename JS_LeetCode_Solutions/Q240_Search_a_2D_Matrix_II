//**
 * @param {number[][]} matrix
 * @param {number} target
 * @return {boolean}
 */
var searchMatrix = function(matrix, target) {
    var idx = 0;
    while(idx < matrix.length && matrix[idx][matrix[idx].length - 1] < target) {
        idx ++;
    }
    while(idx < matrix.length && matrix[idx][0] <= target && matrix[idx][matrix[idx].length - 1] >= target) {
        if(binarySearch(0, matrix[idx].length, matrix[idx], target)) {
            return true;
        }
        idx ++;
    }
    return false;
};

var binarySearch = function(init, tail, arry, target) {
    if(init >= tail) {
        return false;
    }
    if(arry[init] > target || arry[tail - 1] <  target) {
        return false;
    }
    if(arry[init] === target) {
        return true;
    }
    var mid = Math.floor((init + tail) / 2);
    if(target < arry[mid] && binarySearch(init, mid, arry,target)) {
        return true;
    }
    return binarySearch(mid, tail, arry, target);
}**
 * @param {number[][]} matrix
 * @param {number} target
 * @return {boolean}
 */
var searchMatrix = function(matrix, target) {
    var flag = false;
    matrix.forEach(function(arry) {
        flag = flag || binarySearch(0, arry.length, arry, target);
    });
    return flag;
};
var binarySearch = function(init, tail, arry, target) {
    if(init >= tail) {
        return false;
    }
    if(arry[init] === target) {
        return true;
    }
    if(target > arry[tail - 1] || target < arry[init]) {
        return false;
    }
    var mid = Math.floor((init + tail) / 2);
    if(mid > 0 && target > arry[mid - 1]) {
        return binarySearch(mid, tail, arry, target);
    }
    return binarySearch(init, mid, arry, target);
};
