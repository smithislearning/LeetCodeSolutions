/**
 * @param {string[]} words
 * @return {string}
 */
var alienOrder = function(words) {
    if(!Array.isArray(words) || words.length === 0) {
        return '';
    }
    if(words.length === 1) {
        return words[0];
    }
    var map = {};
    var charCnts = {};
    var charSet = new Set();
    var i = 0;
    words.forEach(function(word) {
        for(i = 0; i < word.length; i ++) {
            charSet.add(word.charAt(i));
            charCnts[word.charAt(i)] = 0;
        }
    });
    for(i = 1; i < words.length; i ++) {
        var isDiff = true;
        var w1 = words[i - 1];
        var w2 = words[i];
        var len = Math.min(w1.length, w2.length);
        for(var j = 0; j < len; j ++) {
            var c1 = w1.charAt(j);
            var c2 = w2.charAt(j);
            if(c1 === c2) {
                isDiff = false;
                continue;
            }
            if(typeof map[c1] === 'undefined') {
                map[c1] = new Set();
            }
            if(!map[c1].has(c2)) {
                map[c1].add(c2);
                charCnts[c2] ++;
            }
            isDiff = true;
            break;
        }
        if(!isDiff && w1.length > w2.length) {
            return '';
        }
    }
    var queue = [];
    var itr = charSet.values();
    var val = itr.next().value;
    while(typeof val !== 'undefined') {
        if(charCnts[val] === 0) {
            queue.push(val);
        }
        val = itr.next().value;
    }
    i = 0;
    var rst = '';
    while(i < queue.length) {
        var c = queue[i];
        rst += c;
        if(typeof map[c] !== 'undefined') {
            itr = map[c].values();
            val = itr.next().value;
            while(typeof val !== 'undefined') {
                charCnts[val] --;
                if(charCnts[val] === 0) {
                    queue.push(val);
                }
                val = itr.next().value;
            }
        }
        i ++;
    }
    return (rst.length === charSet.size) ? rst : '';
};