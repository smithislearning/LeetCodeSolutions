/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * function NestedInteger() {
 *
 *     Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     @return {boolean}
 *     this.isInteger = function() {
 *         ...
 *     };
 *
 *     Return the single integer that this NestedInteger holds, if it holds a single integer
 *     Return null if this NestedInteger holds a nested list
 *     @return {integer}
 *     this.getInteger = function() {
 *         ...
 *     };
 *
 *     Set this NestedInteger to hold a single integer equal to value.
 *     @return {void}
 *     this.setInteger = function(value) {
 *         ...
 *     };
 *
 *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.
 *     @return {void}
 *     this.add = function(elem) {
 *         ...
 *     };
 *
 *     Return the nested list that this NestedInteger holds, if it holds a nested list
 *     Return null if this NestedInteger holds a single integer
 *     @return {NestedInteger[]}
 *     this.getList = function() {
 *         ...
 *     };
 * };
 */
/**
 * @param {string} s
 * @return {NestedInteger}
 */
var deserialize = function(s) {
    var rst = new NestedInteger();
    if(s.length === 0) {
        return rst;
    }
    if(s.charAt(0) !== '[') {
        rst.setInteger(Number(s));
        return rst;
    }
    if(s.length < 3) {
        return rst;
    }
    var init = 1;
    var lev = 0;
    for(var tail = 1; tail < s.length; tail ++) {
        var char = s.charAt(tail);
        // console.log(init + ', ' + tail + ', ' + lev);
        if(lev === 0 && (tail === s.length - 1 || char === ',')) {
            rst.add(deserialize(s.substring(init, tail)));
            init = tail + 1;
        }
        if(char === '[') {
            lev ++;
        } else if(char === ']') {
            lev --;
        }
        
    }
    return rst;
};