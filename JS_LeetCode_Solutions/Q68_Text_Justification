/**
 * @param {string[]} words
 * @param {number} maxWidth
 * @return {string[]}
 */
var fullJustify = function(words, maxWidth) {
    var rst = [];
    if(!Array.isArray(words) || words.length === 0 || !Number.isInteger(maxWidth) || maxWidth === 0) {
        rst.push('');
        return rst;
    }
    var str = '';
    if(words.length === 1) {
        str = words[0];
        while(str.length < maxWidth) {
            str += ' ';
        }
        rst.push(str);
        return rst;
    }
    var init = 0; 
    while(init < words.length) {
        str = '';
        var tail = init;
        var len = 0;
        var dryLen = 0;
        while(tail < words.length && len < maxWidth) {
            tail ++;
            dryLen += words[tail - 1].length;
            len = dryLen + tail - init - 1;
        }
        if(len > maxWidth) {
            dryLen -= words[tail - 1].length;
            tail --;
            len = dryLen + tail - init - 1;
        }
        if(tail === init + 1) {
            str = words[init];
            while(str.length < maxWidth) {
                str+= ' ';
            }
            rst.push(str);
            init = tail;
            continue;
        }
        if(tail === words.length) {
            while(init < tail) {
                str += words[init];
                str += ' ';
                init ++;
            }
            while(str.length < maxWidth) {
                str += ' ';
            }
            rst.push(str);
            continue;
        }
        var dif = maxWidth - len;
        var t = Math.floor(dif / (tail - init - 1));
        dif %= (tail - init - 1);
        var space = [];
        for(var i = 0; i < tail - init - 1; i ++) {
            space[i] = 1 + t;
        }
        i = 0;
        while(dif > 0) {
            space[i] ++;
            dif --;
            i ++;
            if(i === space.length) {
                i = 0;
            }
        }
        for(i = 0; i < space.length; i ++) {
            str += words[init + i];
            for(var j = 0; j < space[i]; j ++) {
                str += ' ';
            }
        }
        str += words[init + i];
        rst.push(str);
        init = tail;
    }
    return rst;
};