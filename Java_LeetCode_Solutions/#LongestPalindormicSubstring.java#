public class LongestPalindromicSubstring {
	public static void main(String[] args) {
		String input = "aabaaaa";
		System.out.println(input);
		String output = longestPalindrome(input);
		System.out.println(output);
	}
	
	
	public static String longestPalindrome(String s) {
		try {
			if(s.length() == 0) {
				throw new Exception("Please give me a string of comethind.");
			}
		} catch(Exception e) {
			System.out.println(e);
		}
		String sub = null;
		if(s.length() == 1) {
			return s;
		} else {
			StringBuilder rev = new StringBuilder(s);
			rev.reverse();
			String revS = rev.toString();
			if(s.equals(revS)) {
				return s;
			} else {
				int subLength = 0;
				for(int i = 0; i < s.length(); i++) {
					char tmp = s.charAt(i);
					if(i + revS.indexOf(tmp) + 1 == s.length()) {
						continue;
					} else {
						for(int m = s.lastIndexOf(tmp) + 1; m > i; m--) {
							String subA = s.substring(i, m);
							if(subA.length() <= subLength || subA.length() ==1) {
								break;
							} else {
								String subB = revS.substring(revS.length() - m, revS.length() - i);
								if(subA.equals(subB)) {
									if(subA.length() > subLength) {
										sub = subA;
										subLength = subA.length();
									}
									break;
								}
							}
						}
					}
				}
			}
		}
		return sub;
	}
}